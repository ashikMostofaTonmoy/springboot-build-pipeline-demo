name: ostad demo pipeline
on:
  push:
    branches:
      - main

env:
  REGISTRY: tonmoyflagship/demo-repository

jobs:
  check:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Run Gitleaks
        uses: gitleaks/gitleaks-action@v2
        continue-on-error: true # if you want to allow failures

  code-coverage:
    needs: check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up JDK 8
        uses: actions/setup-java@v3
        with:
          java-version: "8"
          distribution: "adopt"

      - name: Run Code Coverage
        run: |
          mvn clean jacoco:prepare-agent test jacoco:report
          ls -la target/site/jacoco/

      - name: Upload coverage report
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: target/site/jacoco/
          if-no-files-found: error

  sonarqube-analysis:
    needs: [code-coverage]
    # needs: code-coverage
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up JDK 8
        uses: actions/setup-java@v3
        with:
          java-version: "8"
          distribution: "adopt"

      - name: Build with Maven
        run: mvn clean package

      - name: Download coverage report
        uses: actions/download-artifact@v4
        with:
          name: coverage-report
          path: target/site/jacoco

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: "17"
          distribution: "adopt"

      - name: Run SonarQube Analysis
        uses: SonarSource/sonarqube-scan-action@master
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ vars.SONAR_HOST_URL }}
        with:
          args: >
            -Dsonar.projectKey=springboot-project
            -Dsonar.projectName=springboot-project
            -Dsonar.projectVersion=1.0
            -Dsonar.sources=src/main/java
            -Dsonar.tests=src/test/java
            -Dsonar.java.binaries=target/classes
            -Dsonar.java.test.binaries=target/test-classes
            -Dsonar.coverage.jacoco.xmlReportPaths=target/site/jacoco/jacoco.xml
            -Dsonar.verbose=true

      - name: Check if report exists
        run: |
          if [ -f .scannerwork/report-task.txt ]; then
            echo "Report file exists"
            cat .scannerwork/report-task.txt
          else
            echo "Report file not found"
            ls -la .scannerwork/
          fi

      - name: Upload SonarQube Report
        if: success()
        uses: actions/upload-artifact@v4
        with:
          name: sonar-report
          path: .scannerwork/report-task.txt
          if-no-files-found: error

  quality-gate:
    needs: sonarqube-analysis
    runs-on: ubuntu-latest
    steps:
      - name: Download SonarQube Report
        uses: actions/download-artifact@v4
        with:
          name: sonar-report
          path: .scannerwork

      - name: Check SonarQube Quality Gate
        uses: sonarsource/sonarqube-quality-gate-action@master
        timeout-minutes: 5
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
