name: CI/CD Pipeline

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

env:
  REGISTRY: tonmoyflagship/demo-repository
  JAVA_HOME: /usr/lib/jvm/java-8-openjdk-amd64

jobs:
  checkout:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

  build:
    needs: checkout
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up JDK 8
        uses: actions/setup-java@v3
        with:
          java-version: "8"
          distribution: "adopt"

      - name: Build with Maven
        run: mvn clean package

  code-coverage:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up JDK 8
        uses: actions/setup-java@v3
        with:
          java-version: "8"
          distribution: "adopt"

      - name: Run Code Coverage
        run: |
          mvn clean jacoco:prepare-agent test jacoco:report

      - name: Upload coverage report
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: target/site/jacoco/
          if-no-files-found: error

  dependency-check:
    # needs: build
    needs: checkout
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up JDK 8
        uses: actions/setup-java@v3
        with:
          java-version: "8"
          distribution: "adopt"

      - name: Run OWASP Dependency Check
        run: mvn org.owasp:dependency-check-maven:check

      - name: Upload dependency check report
        uses: actions/upload-artifact@v4
        with:
          name: dependency-check-report
          path: |
            target/dependency-check-report.json
            target/dependency-check-report.html
          if-no-files-found: error

  sonarqube-analysis:
    # needs: [code-coverage, dependency-check]
    needs: code-coverage
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up JDK 8
        uses: actions/setup-java@v3
        with:
          java-version: "8"
          distribution: "adopt"
      - name: Build with Maven
        run: mvn clean package
      - name: Download coverage report
        uses: actions/download-artifact@v4
        with:
          name: coverage-report
          path: target/site/jacoco

      - name: Download dependency check report
        uses: actions/download-artifact@v4
        with:
          name: dependency-check-report
          path: target

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: "17"
          distribution: "adopt"

      - name: Run SonarQube Analysis
        uses: SonarSource/sonarqube-scan-action@master
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
        with:
          args: >
            -Dsonar.projectKey=springboot_build
            -Dsonar.projectName=springboot_build
            -Dsonar.projectVersion=1.0
            -Dsonar.sources=src/main/java
            -Dsonar.tests=src/test/java
            -Dsonar.java.binaries=target/classes
            -Dsonar.java.test.binaries=target/test-classes
            -Dsonar.coverage.jacoco.xmlReportPaths=target/site/jacoco/jacoco.xml
            -Dsonar.dependencyCheck.jsonReportPath=target/dependency-check-report.json
            -Dsonar.dependencyCheck.htmlReportPath=target/dependency-check-report.html
            -Dsonar.verbose=true

      - name: Check if report exists
        run: |
          if [ -f .scannerwork/report-task.txt ]; then
            echo "Report file exists"
            cat .scannerwork/report-task.txt
          else
            echo "Report file not found"
            ls -la .scannerwork/
          fi

      - name: Upload SonarQube Report
        if: success()
        uses: actions/upload-artifact@v4
        with:
          name: sonar-report
          path: .scannerwork/report-task.txt
          if-no-files-found: error

  quality-gate:
    needs: sonarqube-analysis
    runs-on: ubuntu-latest
    steps:
      - name: Download SonarQube Report
        uses: actions/download-artifact@v4
        with:
          name: sonar-report
          path: .scannerwork

      - name: Check SonarQube Quality Gate
        uses: sonarsource/sonarqube-quality-gate-action@master
        timeout-minutes: 5
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}

  build-docker:
    # needs: quality-gate
    needs: checkout
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Login to Docker Hub
        run: |
          echo ${{ secrets.DOCKER_PASSWORD }} | docker login -u ${{ secrets.DOCKER_USERNAME }} --password-stdin

      - name: Build Docker image
        run: |
          docker build -t ${{ env.REGISTRY }}:latest .
          docker tag ${{ env.REGISTRY }}:latest ${{ env.REGISTRY }}:${{ github.run_id }}

      - name: Push Docker image
        run: |
          docker push ${{ env.REGISTRY }}:latest
          docker push ${{ env.REGISTRY }}:${{ github.run_id }}

  scan-image:
    needs: build-docker
    runs-on: ubuntu-latest
    steps:
      - name: Scan Docker image with Trivy
        id: trivy-scan
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.REGISTRY }}:latest
          format: "table"
          exit-code: "0"
          ignore-unfixed: true
          vuln-type: "os,library"
          severity: "CRITICAL,HIGH"
          output: "trivy-results.txt"

      - name: Check scan results
        if: always()
        run: |
          if [ -f trivy-results.txt ]; then
            echo "Vulnerability scan results:"
            cat trivy-results.txt
            echo "::warning::Vulnerabilities found in Docker image. Please review the scan results."
          else
            echo "No scan results found"
          fi

  smoke-test:
    needs: scan-image
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Smoke Test
        run: |
          docker run -d --name smokerun -p 8080:8080 ${{ env.REGISTRY }}:latest
          sleep 90
          ./check.sh
          docker rm --force smokerun
